二分查找：
TemplateA:
	


60


class Solution {
    public int searchInsert(int[] nums, int target) {
        if (null == nums || nums.length == 0) {
            return 0;
        }
        
        int start = 0;
        int end = nums.length;
        
        
        while ( (start + 1) < end ) {
            int mid = start + (end - start) / 2;
            if (target == nums[mid]) {
                end = mid;
            } else if (target > nums[mid]) {
                start = mid;
            } else {
                end = mid;
            }
        }

        if (nums[start] >= target) {
            return start;
        } else {
            return end;
        }
    }
}



28

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]



class Solution {
    public boolean findNumberIn2DArray(int[][] matrix, int target) {
	if (null == matrix || matrix.length == 0) {
		return false;
	}
	int row = 0;
	int col = matrix[0].length - 1;
	while (row < matrix.length && col >= 0) {
		if (matrix[row][col] == target) {
			return true;
		} else if (matrix[row][col] > target) {
			col—;
		} else {
			row++;
		}
	}
	return false;
    }
}


14
class Solution {
    public int search(int[] nums, int target) {
        if (null == nums || nums.length == 0) {
            return -1;
        }
        int start = 0;
        int end = nums.length;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                end = mid;
            } else if (nums[mid] < target) {			
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        if (nums[start] == target) {
            return start;
        } else {
            return -1;
        }
    }
}


447


public class Solution {
    /**
     * @param reader: An instance of ArrayReader.
     * @param target: An integer
     * @return: An integer which is the first index of target.
     */
    public int searchBigSortedArray(ArrayReader reader, int target) {
        int start = 0;
        int end = 1;
        while (reader.get(end) < target) {
            end = end * 2;
        }
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (reader.get(mid) == target) {
                end = mid;
            } else if (reader.get(mid) < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        if(reader.get(start) == target) {
            return start;
        } else {
            return -1;
        }
    }
}

159
class Solution {
    public int minArray(int[] numbers) {
        if (null == numbers || numbers.length == 0) {
            return -1;
        }
        int start = 0;
        int end = numbers.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (numbers[mid] == numbers[end]) {
                end --;
            }else if (numbers[mid] > numbers[end]) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (numbers[start] > numbers[end]){
            return numbers[end];
        } else {
            return numbers[start];
        }
    }
}



75
class Solution {
    public int findPeakElement(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        while(start < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] < nums[mid + 1]) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        return start;
    }
}



74 isBadVersion(3)

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int start = 0;
        int end = n;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (isBadVersion(mid)) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }
}


62

public class Solution {
    public int search(int[] nums, int target) {
        if (null == nums || nums.length == 0) {
            return -1;
        }
        int start = 0;
        int end = nums.length - 1;
        while(start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] > nums[start]) {
                if (nums[start] <= target && nums[mid] >= target){
                    end = mid;
                } else {
                    start = mid;
                }
            } else {
                if (nums[end] >= target && nums[mid] <= target){
                    start = mid;
                } else {
                    end = mid;
                }
            }
        }
        if (nums[start] == target) {
            return start;
        } else if (nums[end] == target) {
            return end;
        } else {
            return -1;
        }
    }
}


61

class Solution {
    public int search(int[] nums, int target) {
        if (null == nums || nums.length == 0){
            return 0;
        }

        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                end = mid;
            } else if (nums[mid] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }

        int first = -1;
        if(nums[start] == target) {
            first = start;
        } else if (nums[end] == target) {
            first = end;  
        } else {
            return ;
        }

        start = 0;
        end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                start = mid;
            } else if (nums[mid] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }

        int last = -1;
        if(nums[end] == target) {
            last = end;
        } else if (nums[start] == target) {
            last = start;
        } else {
            return 0;
        }

        return last - first + 1;
    }
}


462

class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(null == nums || nums.length == 0){
            return new int[]{-1,-1};
        }

        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                end = mid;
            } else if (nums[mid] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }

        int first = -1;
        if (nums[start] == target) {
            first = start;
        } else if(nums[end] == target) {
            first = end;
        } else {
            return new int[]{-1,-1};
        }

        start = 0;
        end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                start = mid;
            } else if (nums[mid] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }

        int last = -1;
        if (nums[end] == target) {
            last = end;
        } else if(nums[start] == target) {
            last = start;
        } else {
            return new int[]{-1,-1};
        }
        return new int[]{first,last};
    }
}


459
public class Solution {
    public int closestNumber(int[] nums, int target) {
        if (null == nums || nums.length == 0) {
            return -1;
        }

        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                end = mid;
            } else if (nums[mid] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }

        return Math.abs(nums[start] - target) < Math.abs(nums[end] - target) ? start : end;
    }
}



457
public class Solution {
    public int findPosition(int[] nums, int target) {
        if (null == nums || nums.length == 0){
            return -1;
        }
        int start = 0;
        int end = nums.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                end = mid;
            } else if (nums[mid] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }

        if (nums[start] == target){
            return start;
        }
        if (nums[end] == target){
            return end;
        }
        return -1;
    }
}

460
public class Solution {
    public int[] kClosestNumbers(int[] nums, int target, int k) {
        if (null == nums || nums.length == 0) {
            return new int[]{};
        }

        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                end = mid;
            } else if (nums[mid] > target) {
                end = mid;
            } else {
                start = mid;
            }
        }

        for (int i = 0; i < k; i++) {
            int left = Math.abs(nums[start] - target);
            int right = Math.abs(nums[end] - target);
            if ( left == right ){
                if (start == 0){
                    end++;
                } else {
                    start--;
                }
            } else if (left > right) {
                if (end == nums.length - 1){
                    start--;
                } else {
                    end++;
                }
            } else {
                if (start == 0){
                    end++;
                } else {
                    start--;
                }
            }
        }




        int[] res = new int[(end - start + 1)];
        for (int i = start; start <= end; i++){
            res[i-start] = nums[start];
        }
        return res;

    }
}



183
160
63
38