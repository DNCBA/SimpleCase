138
public class Solution {
    public List<Integer> subarraySum(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i; j < nums.length; j++) {
                if (0 == sum(nums, i, j)) {
                    return Arrays.asList(i, j);
                }
            }
        }
        return new ArrayList();
    }

    private int sum(int[] nums, int start, int end) {
        int sum = 0;
        for (int i = start; i <= end; i++) {
            sum = sum + nums[i];
        }
        return sum;
    }
}



public class Solution {
    public List<Integer> subarraySum(int[] nums) {
        Map<Integer,Integer> map = new HashMap();
        map.put(0 , -1);
        Integer sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
            if (null != map.get(sum)) {
                int index1 = map.get(sum);
                return Arrays.asList(index1 + 1, i);
            }
            map.put(sum, i);
        }
        return new ArrayList();
    }
}


64
class Solution {
    public void merge(int[] A, int m, int[] B, int n) {
        int index = m + n - 1;
        m--;
        n--;
        while (m >= 0 && n >= 0) {
            if (A[m] > B[n]) {
                A[index] = A[m];
                m--;
                index--;
            } else {
                A[index] = B[n];
                n--;
                index--;
            }
        }

        while (m >= 0 || n >= 0) {
            if (m >= 0) {
                A[index] = A[m];
                m--;
                index--;
            }

            if (n >= 0) {
                A[index] = B[n];
                n--;
                index--;
            }
        }
    }
}

class Solution {
    public void mergeSortedArray(int[] A, int m, int[] B, int n) {
        int index = m + n - 1;
        m--;
        n--;
        while (m >= 0 && n >= 0) {
            if (A[m] > B[n]) {
                A[index] = A[m];
                m--;
                index--;
            } else {
                A[index] = B[n];
                n--;
                index--;
            }
        }

        while (m >= 0 || n >= 0) {
            if (m >= 0) {
                A[index] = A[m];
                m--;
                index--;
            }

            if (n >= 0) {
                A[index] = B[n];
                n--;
                index--;
            }
        }
    }
}



41
public class Solution {
    public int maxSubArray(int[] nums) {
        //define
        int[] dp = new int[nums.length];

        //init
        dp[0] = nums[0];

        //function
        for (int i = 1; i < nums.length; i++) {
            dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);
        }

        //result;
        int result = dp[0];
        for (int i = 1; i < dp.length; i++) {
            result = Math.max(result, dp[i]);
        }
        return result;
    }
}




148
public class Solution {
    public void sortColors(int[] nums) {
        int left = 0;
        int right = nums.length - 1;
        int curr = 0;
        while (curr <= right) {
            if (0 == nums[curr]) {
                swap(nums, curr++, left++);
            } else if (2 == nums[curr]) {
                swap(nums, curr, right--);
            } else {
                curr++;
            }
        }
    }


    private void swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
}



139

59

42

31

65

